heat_template_version: 2014-10-16
###############################################################################
# This is a template that illustrates how to scale remote resource based on
# local alarm.
#
# How to use it:
#
# 1. Create a stack with this template:
#    $ heat stack-create -f autoscaling2.yaml -P key_name=YOUR_KEY test
#
# 2. Confirm the initial number of VMs, which should be 1.
#    $ nova list
#
# 3. Confirm the two alarms were created:
#    $ ceilometer alarm-list
#    +--------------------------------------+----------------------------------+-------+---------+------------+--------------------------------+
#    | Alarm ID                             | Name                             | State | Enabled | Continuous | Alarm condition                |
#    +--------------------------------------+----------------------------------+-------+---------+------------+--------------------------------+
#    | 62c6bd41-c2b6-4c55-bc58-1381112cb877 | test-cpu_alarm_high-4mksyvjld5xb | ok    | True    | True       | cpu_util > 40.0 during 1 x 60s |
#    | 7f7f9bb7-001b-4c6a-9683-89c38d592e6c | test-cpu_alarm_low-au2manbhujwv  | ok    | True    | True       | cpu_util < 10.0 during 1 x 60s |
#    +--------------------------------------+----------------------------------+-------+---------+------------+--------------------------------+
#
# 4. SSH to the VM and run a script to generate load:
#    $ ssh ubuntu@YOUR_VM_IP_ADDRESS
#    $ ls ~/ceilometer-saviwsscript/prime_numbers.py # confirm the script is installed. If not, wait a few seconds.
#    $ screen -S "load" -d -m python ~/ceilometer-saviwsscript/prime_numbers.py 0 150000 0.0009
#    $ screen -ls # confrim the screen is running.
#    $ exit
#
# 5. Wait a few minutes.
#
# 6. Confirm the alarm 'test-cpu_alarm_high-XXXX' was triggered:
#    $ ceilometer alarm-history -a 62c6bd41-c2b6-4c55-bc58-1381112cb877
#
# 7. Confirm a remote VM was launched.
#    $ export OS_REGION_NAME=EDGE-MG-1
#    $ nova list
#
# 8. Wait a few more minutes. Confirm the alarm 'test-cpu_alarm_low-XXXX' was
#    triggered, and the remote VM was disappear.
###############################################################################

description: >
  This is a template that illustrates how to scale remote resource
  based on local alarm.

parameters:
  key_name:
    type: string
    description: Name of an existing key pair to use for the instances
  flavor:
    type: string
    description: Flavor for the instances to be created
    default: m1.small
  image:
    type: string
    default: Ubuntu64-3
    description: Name or ID of the image to use for the instances.

resources:
  remote_stack:
    type: OS::Heat::Stack
    properties:
      context:
        region_name: EDGE-MG-1
      template: { get_file: autoscaling2_nested.yaml }
      timeout: 60
      parameters:
        key_name: { get_param: key_name }
        image: { get_param: image }
        flavor: { get_param: flavor }
  local_vm:
    type: OS::Heat::AutoScalingGroup
    properties:
      resource:
        type: OS::Nova::Server
        properties:
          key_name: { get_param: key_name }
          image: { get_param: image }
          flavor: { get_param: flavor }
          metadata: {"metering.stack": {get_param: "OS::stack_id"}}
          user_data: |
            #!/bin/bash -x
            apt-get update
            apt-get install python-dev python-pip git -y
            git clone https://github.com/jyericlin/ceilometer-saviwsscript.git /home/ubuntu/ceilometer-saviwsscript
      min_size: 1
      max_size: 1
  cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 40% for 60 seconds
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 40
      alarm_actions:
        - { get_attr: [remote_stack, outputs, scale_up_url] }
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: gt
  cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-down if the average CPU < 10% for 60 seconds
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 10
      alarm_actions:
        - { get_attr: [remote_stack, outputs, scale_down_url] }
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: lt

outputs:
  local_server_ips:
    description: List of IP addresses of each VM.
    value: { get_attr: [local_vm, outputs_list, first_address] }
  remote_server_ips:
    description: List of IP addresses of each VM.
    value: { get_attr: [remote_stack, outputs, server_ips] }